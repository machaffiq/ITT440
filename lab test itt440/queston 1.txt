#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>
#include <signal.h>

#define MESSAGE_SIZE 100

void childProcess(int childNum, int pipeFd[])
{
    close(pipeFd[1]); 
    char message[MESSAGE_SIZE];
    read(pipeFd[0], message, MESSAGE_SIZE); 
    printf("Child %d received message: %s\n", childNum, message);
    
    close(pipeFd[0]);
    exit(0);
}

void signalHandler(int sigNum)
{
    printf("Parent process received interrupt signal.\n");
}

int main()
{
    int pipeFd[2];
    pid_t childPid[3];
    
    if (pipe(pipeFd) == -1) {
        perror("Pipe creation failed");
        exit(1);
    }
    
    signal(SIGINT, signalHandler); 
    
    for (int i = 0; i < 3; i++) {
        childPid[i] = fork();
        
        if (childPid[i] == -1) {
            perror("Fork failed");
            exit(1);
        }
        else if (childPid[i] == 0) {
            childProcess(i + 1, pipeFd);
        }
    }
    
    close(pipeFd[0]); 
    
    char message[MESSAGE_SIZE] = "Hello, children!"; 
    write(pipeFd[1], message, strlen(message) + 1); 
    close(pipeFd[1]); 
    for (int i = 0; i < 3; i++) {
        waitpid(childPid[i], NULL, 0); 
    }
    
    return 0;
}